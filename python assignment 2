{
 "cells": [
  {
   "attachments": {
    "image.png": {
     "image/png": "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"
    }
   },
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1. Create the below pattern using nested for loop in Python.\n",
    "\n",
    "![image.png](attachment:image.png)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "* \n",
      "* * \n",
      "* * * \n",
      "* * * * \n",
      "* * * * * \n",
      "* * * * \n",
      "* * * \n",
      "* * \n",
      "* \n"
     ]
    }
   ],
   "source": [
    "n=5;\n",
    "for i in range(n):\n",
    "    for j in range(i):\n",
    "        print ('* ', end=\"\")\n",
    "    print('')\n",
    "\n",
    "for i in range(n,0,-1):\n",
    "    for j in range(i):\n",
    "        print('* ', end=\"\")\n",
    "    print('')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "2. Write a Python program to reverse a word after accepting the input from the user.\n",
    "\n",
    "Input word: ineuron\n",
    "Output: norueni"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Input a word to reverse: ineuron\n",
      "norueni\n",
      "\n"
     ]
    }
   ],
   "source": [
    "word = input(\"Input a word to reverse: \")\n",
    "\n",
    "for char in range(len(word) - 1, -1, -1):\n",
    "  print(word[char], end=\"\")\n",
    "print(\"\\n\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
